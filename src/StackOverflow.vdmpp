/**
* This class represents the Stack Overflow website
*/
class StackOverflow

	types
		
		/** String */
		public String = seq of char;
		
		/** Identifier (start at 1) */ 
		public ID = nat1;


	instance variables
		
		/** List of existing users */
		public users: set of User := {};
		
		/** List of existing questions */
		public questions: set of Question := {};
		
		-- o.O?
		private static stackoverflow: StackOverflow := new StackOverflow();
		
		/** The user that's currently logged in */
		public loggedUser: [User] := nil;
	
	
	operations
		
		/**
		* Default Constructor
		*
		* @post StackOverflow was created
		*/
		public StackOverflow: () ==> StackOverflow
		StackOverflow() == (
			return self;
		)
		post users = {};
		
		
		/**
		* Creates a new user
		*
		* @param username Username
		* @param password Password
		*
		* @pre  Username is unique
		* @post User was added to users' set
		*/
		public signup: String * String ==> ()
		signup(username, password) == (
			
			-- create user
			dcl user: User := new User(username, password);
			
			-- add user
			users := users union {user};
		)
		pre  (
			forall user in set users & user.username <> username
		)
		post (
			card users = card users~ + 1 and
			exists user in set users & (
				user.username = username and
				user.password = password and
				user.id = User`nextid - 1
		));
		
		
		/**
		* Logs in the user with the given username-password
		*
		* @param username Username
		* @param password Password
		*
		* @pre  There isn't an user already logged in
		* @pre  Username and password are a match
		* @post User logged in
		*/
		public login: String * String ==> ()
		login(username, password) == (
			
			for all user in set users do (
				
				if (user.username = username and user.password = password) then (
					
					loggedUser := user;
				);
			);
		)
		pre  (
			loggedUser = nil and exists1 user in set users & (
			user.username = username and
			user.password = password
		))
		post (
			loggedUser.username = username and
			loggedUser.password = password
		);
		
		
		/**
		* Logs out the currently logged in user
		*
		* @pre  User must be logged in
		* @post User logged out
		*/
		public logout: () ==> ()
		logout() == (
		
			loggedUser := nil;
		)
		pre  (loggedUser <> nil)
		post (loggedUser = nil);
		
		
		/**
		* Resets this instance
		*
		* @post There are no users and no questions
		*/
		public clear: () ==> ()
		clear() == (
			users := {};
			questions := {};
			loggedUser := nil;
			User`nextid := 1;
			Answer`nextid := 1;
			Question`nextid := 1;
			
		)
		post (users = {} and questions = {} and loggedUser = nil);
		
		
		/**
		* Returns the existent instance
		*/
		public pure static getInstance: () ==> StackOverflow
		getInstance() == (
			return stackoverflow;
		);
		
		
		/**
		* Resets the instance
		*/
		public static clearInstance: () ==> StackOverflow
		clearInstance() == (
			stackoverflow := new StackOverflow();
			return getInstance();
		)
		post RESULT.users = {};


		/**
		* Creates a new question
		*
		* @param user Author
		* @param title Title
		* @param text Text
		*
		* @pre  Author exists
		* @post Question was added to questions' set
		*/
		
		/** TODO remove param loggedUser.
		E suposto usares sempre a var loggedUser da StackOverflow,
		por isso nao e preciso estares a passar um loggedUser como param do metodo,
		ja tens acesso a ele, visto ser uma variavel da classe
		Tambem tens de acrescentar a precondicao de o user estar loged in.
		Ve como eu fiz os upvotes e tenta fazer igual sff
		*/
		public addQuestion: User * String * String ==> Question
		addQuestion(loggedUser, title, text) == (
			
			-- create question
			dcl question: Question := new Question(loggedUser, title, text);
			
			-- add question
			questions := questions union {question};
			
			return question;
		)
		pre  (
			forall question in set questions & question.author in set users
		)
		post (
			card questions = card questions~ + 1 and
			exists question in set questions & (
				question.author = loggedUser and
				question.title = title and
				question.text = text
		));
		
		
		/**
		* Upvotes the given answer
		*
		* @param id Answer to upvote
		*
		* @pre  User is logged in
		* @pre  Answer to upvote exists
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public upvoteAnswer: ID ==> ()
		upvoteAnswer(id) == (
		
			for all question in set questions do (
				
				for all answer in set question.answers do (
					
					if (answer.id = id) then (
						
						answer.upvote(loggedUser);
					);
				);
			);
		)
		pre  (
			loggedUser <> nil and
			exists q in set questions & (
				id in set {a.id | a in set q.answers}
			)
		)
		post (
			questions \ {q | q in set questions & id in set {a.id | a in set q.answers}} = questions~ \ {q | q in set questions~ & id in set {a.id | a in set q.answers}} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Downvotes the given answer
		*
		* @param id Answer to downvote
		*
		* @pre  User is logged in
		* @pre  Answer to downvote exists
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public downvoteAnswer: ID ==> ()
		downvoteAnswer(id) == (
		
			for all question in set questions do (
				
				for all answer in set question.answers do (
					
					if (answer.id = id) then (
						
						answer.downvote(loggedUser);
					);
				);
			);
		)
		pre  (
			loggedUser <> nil and
			exists q in set questions & (
				id in set {a.id | a in set q.answers}
			)
		)
		post (
			questions \ {q | q in set questions & id in set {a.id | a in set q.answers}} = questions~ \ {q | q in set questions~ & id in set {a.id | a in set q.answers}} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Unvoted the given answer
		*
		* @param id Answer to unvote
		*
		* @pre  User is logged in
		* @pre  Answer to unvote exists
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public unvoteAnswer: ID ==> ()
		unvoteAnswer(id) == (
		
			for all question in set questions do (
				
				for all answer in set question.answers do (
					
					if (answer.id = id) then (
						
						answer.unvote(loggedUser);
					);
				);
			);
		)
		pre  (
			loggedUser <> nil and
			exists q in set questions & (
				id in set {a.id | a in set q.answers}
			)
		)
		post (
			questions \ {q | q in set questions & id in set {a.id | a in set q.answers}} = questions~ \ {q | q in set questions~ & id in set {a.id | a in set q.answers}} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Upvotes the given question
		*
		* @param id Question to upvote
		*
		* @pre  User is logged in
		* @pre  Question to upvote exists
		* @post No changes were made to other questions
		* @post User stays logged in
		*/
		public upvoteQuestion: ID ==> ()
		upvoteQuestion(id) == (
		
			for all question in set questions do (
				
				if (question.id = id) then (
					
					question.upvote(loggedUser);
				)
			);
		)
		pre  (
			loggedUser <> nil and
			exists q in set questions & (q.id = id)
		)
		post (
			questions \ {q | q in set questions & q.id = id} = questions~ \ {q | q in set questions~ & q.id = id} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Downvotes the given question
		*
		* @param id Question to downvote
		*
		* @pre  User is logged in
		* @pre  Question to downvote exists
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public downvoteQuestion: ID ==> ()
		downvoteQuestion(id) == (
		
			for all question in set questions do (
				
				if (question.id = id) then (
				
					question.downvote(loggedUser);
				)
			);
		)
		pre  (
			loggedUser <> nil and
			exists q in set questions & (q.id = id)
		)
		post (
			questions \ {q | q in set questions & q.id = id} = questions~ \ {q | q in set questions~ & q.id = id} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Unvotes the given question
		*
		* @param id Question to unvote
		*
		* @pre  User is logged in
		* @pre  Question to unvote exists
		* @post No changes were made to other questions
		* @post User stays logged in
		*/
		public unvoteQuestion: ID ==> ()
		unvoteQuestion(id) == (
		
			for all question in set questions do (
				
				if (question.id = id) then (
					
					question.unvote(loggedUser);
				)
			);
		)
		pre  (
			loggedUser <> nil and
			exists q in set questions & (q.id = id)
		)
		post (
			questions \ {q | q in set questions & q.id = id} = questions~ \ {q | q in set questions~ & q.id = id} and
			loggedUser = loggedUser~
		);

end StackOverflow