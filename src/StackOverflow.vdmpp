/**
* This class represents the Stack Overflow website
*/
class StackOverflow

	types
		
		/** String */
		public String = seq of char;
		
		/** Identifier (starts at 1) */ 
		public ID = nat1;


	instance variables
		
		/** Set of existing users */
		public users: set of User := {};
		
		/** List of existing questions */
		public questions: seq of Question := [];
		
		/** The user that's currently logged in */
		public loggedUser: [User] := nil;
	
	
	operations
		
		/**
		* Default Constructor
		*
		* @post StackOverflow was created
		*/
		public StackOverflow: () ==> StackOverflow
		StackOverflow() == (
		
			return self;
		)
		post (
			users = {} and
			questions = [] and
			loggedUser = nil
		);
		
		
		/**
		* Creates a new user
		*
		* @param username Username
		* @param password Password
		*
		* @pre Username is unique
		*
		* @post User was created
		*/
		public signup: String * String ==> ()
		signup(username, password) == (
			
			-- create user
			dcl user: User := new User(username, password);
			
			-- add user
			users := users union {user};
		)
		pre  (
			forall user in set users & user.username <> username
		)
		post (
			card users = card users~ + 1 and
			exists user in set users & (
				user.username = username and
				user.password = password and
				user.id = User`nextid - 1
			)
		);
		
		
		/**
		* Logs in the user with the given username-password
		*
		* @param username Username
		* @param password Password
		*
		* @pre There isn't an user already logged in
		* @pre Username and password are a match
		*
		* @post User logged in
		*/
		public login: String * String ==> ()
		login(username, password) == (
			
			loggedUser := iota user in set users & (user.username = username and user.password = password);
		)
		pre  (
			loggedUser = nil and
			exists1 user in set users & (
				user.username = username and
				user.password = password
			)
		)
		post (
			loggedUser.username = username and loggedUser.password = password
		);
		
		
		/**
		* Logs out the currently logged in user
		*
		* @pre User must be logged in
		*
		* @post User logged out
		*/
		public logout: () ==> ()
		logout() == (
		
			loggedUser := nil;
		)
		pre  (
			loggedUser <> nil
		)
		post (
			loggedUser = nil
		);
		
		
		/**
		* Resets this instance
		*
		* @post StackOverflow was cleared
		*/
		public clear: () ==> ()
		clear() == (
		
			users := {};
			questions := [];
			loggedUser := nil;
			
			-- reset static IDs
			User`nextid := 1;
			Answer`nextid := 1;
			Question`nextid := 1;
			
		)
		post (
			users = {} and questions = [] and loggedUser = nil
		);


		/**
		* Adds a new question
		*
		* @param user Author
		* @param title Title
		* @param text Body
		*
		* @return Added question
		*
		* @pre User is logged in
		*
		* @post Question was added
		* @post User stays logged in
		*/
		public addQuestion: String * String ==> Question
		addQuestion(title, text) == (
			
			-- create question
			dcl question: Question := new Question(loggedUser, title, text);
			
			-- add question
			questions := questions^[question];
			
			return question;
		)
		pre  (
			loggedUser <> nil
		)
		post (
			len questions = len questions~ + 1 and
			exists question in set elems questions & (
				question.author = loggedUser and
				question.title = title and
				question.text = text
			) and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Shows all questions and their respective answers
		*
		* @return Number of questions-answers shown
		*
		* @pre At least one question exists
		*
		* @post No changes were made
		* @post User stays logged in
		*/
		public showQuestionsAndAnswers: () ==> nat
		showQuestionsAndAnswers() == (
		
		 dcl questionsTemp : seq of Question := questions;
		 dcl answersTemp : seq of Answer;
		 dcl questionTemp : Question;
		 dcl answerTemp: Answer;
		 dcl i : nat := 0;
		 dcl j : nat := 0;	 
		 dcl num : nat1 := 1;
		 dcl sum : nat := 0;
		 
		 while i < len questionsTemp do (
		 		i := i + 1;
		 		questionTemp := questionsTemp(i);
		 		
				IO`print("\n");
				IO`print(questionTemp.title);
				IO`print("(");
				IO`print(questionTemp.score);
				IO`print("): \n ");
				IO`print(questionTemp.text);
				IO`print("\n");
				sum := sum + 1;
				
				answersTemp := questionTemp.answers;
				num := 1;
				while j  < len answersTemp do (
				
				j := j + 1;
				answerTemp := answersTemp(j);
				
				IO`print(num);
				IO`print("(");
				IO`print(answerTemp.score);
				IO`print("): ");
				IO`print(answerTemp.text);
				IO`print("\n");
				sum := sum + 1;
				
				num := num + 1;
				)
		 );
		 
		 return sum;
		)
		pre  (
			len questions > 0
		)
		post (
			questions = questions~ and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Upvotes the given answer
		*
		* @param id Answer to upvote
		*
		* @pre User is logged in
		* @pre Answer to upvote exists
		*
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public upvoteAnswer: ID ==> ()
		upvoteAnswer(id) == (
			
			-- get answer's parent
			dcl question: Question := iota q in set elems questions & (id in set {a.id | a in set elems q.answers});
			
			-- get answer
			dcl answer: Answer := iota a in set elems question.answers & a.id = id;
			
			-- upvote
			answer.upvote(loggedUser);
		)
		pre  (
			loggedUser <> nil and
			exists q in set elems questions & (
				id in set {a.id | a in set elems q.answers}
			)
		)
		post (
			elems questions \ {q | q in set elems questions & id in set {a.id | a in set elems q.answers}} = elems questions~ \ {q | q in set elems questions~ & id in set {a.id | a in set elems q.answers}} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Downvotes the given answer
		*
		* @param id Answer to downvote
		*
		* @pre User is logged in
		* @pre Answer to downvote exists
		*
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public downvoteAnswer: ID ==> ()
		downvoteAnswer(id) == (
			
			-- get answer's parent
			dcl question: Question := iota q in set elems questions & (id in set {a.id | a in set elems q.answers});
			
			-- get answer
			dcl answer: Answer := iota a in set elems question.answers & a.id = id;
			
			-- downvote
			answer.downvote(loggedUser);
		)
		pre  (
			loggedUser <> nil and
			exists q in set elems questions & (
				id in set {a.id | a in set elems q.answers}
			)
		)
		post (
			elems questions \ {q | q in set elems questions & id in set {a.id | a in set elems q.answers}} = elems questions~ \ {q | q in set elems questions~ & id in set {a.id | a in set elems q.answers}} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Unvotes the given answer
		*
		* @param id Answer to unvote
		*
		* @pre User is logged in
		* @pre Answer to unvote exists
		*
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public unvoteAnswer: ID ==> ()
		unvoteAnswer(id) == (
		
			-- get answer's parent
			dcl question: Question := iota q in set elems questions & (id in set {a.id | a in set elems q.answers});
			
			-- get answer
			dcl answer: Answer := iota a in set elems question.answers & a.id = id;
			
			-- unvote
			answer.unvote(loggedUser);
		)
		pre  (
			loggedUser <> nil and
			exists q in set elems questions & (
				id in set {a.id | a in set elems q.answers}
			)
		)
		post (
			elems questions \ {q | q in set elems questions & id in set {a.id | a in set elems q.answers}} = elems questions~ \ {q | q in set elems questions~ & id in set {a.id | a in set elems q.answers}} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Upvotes the given question
		*
		* @param id Question to upvote
		*
		* @pre User is logged in
		* @pre Question to upvote exists
		*
		* @post No changes were made to other questions
		* @post User stays logged in
		*/
		public upvoteQuestion: ID ==> ()
		upvoteQuestion(id) == (
			
			-- get question
			dcl question: Question := iota q in set elems questions & q.id = id;
			
			-- upvote
			question.upvote(loggedUser);
		)
		pre  (
			loggedUser <> nil and
			exists q in set elems questions & (q.id = id)
		)
		post (
			elems questions \ {q | q in set elems questions & q.id = id} = elems questions~ \ {q | q in set elems questions~ & q.id = id} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Downvotes the given question
		*
		* @param id Question to downvote
		*
		* @pre User is logged in
		* @pre Question to downvote exists
		*
		* @post No changes were made to other answers
		* @post User stays logged in
		*/
		public downvoteQuestion: ID ==> ()
		downvoteQuestion(id) == (
		
			-- get question
			dcl question: Question := iota q in set elems questions & q.id = id;
			
			-- downvote
			question.downvote(loggedUser);
		)
		pre  (
			loggedUser <> nil and
			exists q in set elems questions & (q.id = id)
		)
		post (
			elems questions \ {q | q in set elems questions & q.id = id} = elems questions~ \ {q | q in set elems questions~ & q.id = id} and
			loggedUser = loggedUser~
		);
		
		
		/**
		* Unvotes the given question
		*
		* @param id Question to unvote
		*
		* @pre User is logged in
		* @pre Question to unvote exists
		*
		* @post No changes were made to other questions
		* @post User stays logged in
		*/
		public unvoteQuestion: ID ==> ()
		unvoteQuestion(id) == (
		
			-- get question
			dcl question: Question := iota q in set elems questions & q.id = id;
			
			-- unvote
			question.unvote(loggedUser);
		)
		pre  (
			loggedUser <> nil and
			exists q in set elems questions & (q.id = id)
		)
		post (
			elems questions \ {q | q in set elems questions & q.id = id} = elems questions~ \ {q | q in set elems questions~ & q.id = id} and
			loggedUser = loggedUser~
		);

end StackOverflow