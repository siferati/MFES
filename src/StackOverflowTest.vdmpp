/**
* This class is used for testing purposes.
*
* Commented lines are examples that break pre-conditions or post-conditions,
* and therefore cannot be executed.
*/
class StackOverflowTest

	instance variables
	
		/** Test subject */
		stackOverflow: StackOverflow := new StackOverflow();
		
	
	operations
		
		/**
		* Check if something is true
		*
		* @pre Cond is true
		*/
		private assertTrue: bool ==> ()
		assertTrue(cond) == (
			return;
		)
		pre cond;
		
		
		/**
		* Test signup
		*/
		private testSignup: () ==> ()
		testSignup() == (
			
			-- requirements
			stackOverflow.clear();
			
			-- test
			stackOverflow.signup("user1", "pass1");
		 -- stackOverflow.signup("user1", "pass2");
			
			assertTrue(exists1 user in set stackOverflow.users & (
				user.username = "user1" and
				user.password = "pass1" and
				user.id = User`nextid - 1
			));
		);
		
		
		/**
		* Test login
		*/
		private testLogin: () ==> ()
		testLogin() == (
			
			-- requirements
			stackOverflow.clear();
			stackOverflow.signup("user1", "pass1");
			
			-- test
			stackOverflow.login("user1", "pass1");
		 -- stackOverflow.login("user1", "pass2");
			
			assertTrue(
				stackOverflow.loggedUser.username = "user1" and
				stackOverflow.loggedUser.password = "pass1"
			);
		);
		
				
		/**
		* Test logout
		*/
		private testLogout: () ==> ()
		testLogout() == (
		
			-- requirements
			stackOverflow.clear();
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
		   
		   	-- test
		    stackOverflow.logout();
		 -- stackOverflow.logout();
			
			assertTrue(
				stackOverflow.loggedUser = nil
			);
		);
		
		
		/**
		* Test addQuestion
		*/
		private testAddQuestion: () ==> ()
		testAddQuestion() == (
		
			-- variables
			dcl question: Question;
			
			-- requirements
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			
			-- test
			question := stackOverflow.addQuestion("title1","text1");
			
			assertTrue(
				question in set elems stackOverflow.questions
			);
			
		);
		
		
		/**
		* Test add Answer
		*/
		private testAddAnswer: () ==> ()
		testAddAnswer() == (
		
			-- variables
			dcl question: Question;
			dcl answer: Answer;
			
			-- requirements
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","text1");
			
			-- test
			answer := question.addAnswer(stackOverflow.loggedUser,"text1");
			
			assertTrue(
				answer in set elems question.answers
			);
		);
		
		
		/**
		* Test upvoteAnswer
		*/
		private testUpvoteAnswer: () ==> ()
		testUpvoteAnswer() == (
			
			-- variables
			dcl question: Question;
			dcl answer: Answer;
			
			-- requirements
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","question1");
			answer := question.addAnswer(stackOverflow.loggedUser,"answer1");
			
			-- test
			stackOverflow.upvoteAnswer(1);
		--  stackOverflow.upvoteAnswer(2);
			
			assertTrue(
				answer.score = 1
			);
		);
		
		
		/**
		* Test downvoteAnswer
		*/
		private testDownvoteAnswer: () ==> ()
		testDownvoteAnswer() == (
			
			-- variables
			dcl question: Question;
			dcl answer: Answer;
			
			-- requirements
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","question1");
			answer := question.addAnswer(stackOverflow.loggedUser,"answer1");
			
			-- test
			stackOverflow.downvoteAnswer(1);
		--  stackOverflow.downvoteAnswer(2);
			
			assertTrue(
				answer.score = -1
			);
		);
		
		
		/**
		* Test unvoteAnswer
		*/
		private testUnvoteAnswer: () ==> ()
		testUnvoteAnswer() == (
			
			-- variables
			dcl question: Question;
			dcl answer: Answer;
			
			-- requirements #1
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","question1");
			answer := question.addAnswer(stackOverflow.loggedUser,"answer1");
			stackOverflow.upvoteAnswer(1);
			stackOverflow.downvoteAnswer(1);
			stackOverflow.upvoteAnswer(1);
			
			-- test #1
			stackOverflow.unvoteAnswer(1);
		--  stackOverflow.unvoteAnswer(2);
			
			-- requirements #2
			stackOverflow.downvoteAnswer(1);
			
			-- test #2
			stackOverflow.unvoteAnswer(1);
			
			assertTrue(
				answer.score = 0
			);
		);
		
		
		/**
		* Test upvoteQuestion
		*/
		private testUpvoteQuestion: () ==> ()
		testUpvoteQuestion() == (
			
			-- variables
			dcl question: Question;
			
			-- requirements
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","question1");
			
			-- test
			stackOverflow.upvoteQuestion(1);
		--  stackOverflow.upvoteAnswer(2);
			
			assertTrue(
				question.score = 1
			);
		);
		
		
		/**
		* Test downvoteQuestion
		*/
		private testDownvoteQuestion: () ==> ()
		testDownvoteQuestion() == (
			
			-- variables
			dcl question: Question;
			
			-- requirements
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","question1");
			
			-- test
			stackOverflow.downvoteQuestion(1);
		--  stackOverflow.downvoteAnswer(2);
			
			assertTrue(
				question.score = -1
			);
		);
		
		
		/**
		* Test unvoteQuestion
		*/
		private testUnvoteQuestion: () ==> ()
		testUnvoteQuestion() == (
		
			-- variables
			dcl question: Question;
			
			-- requirements #1
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","question1");
			stackOverflow.upvoteQuestion(1);
			stackOverflow.downvoteQuestion(1);
			stackOverflow.upvoteQuestion(1);
			
			-- test #1
			stackOverflow.unvoteQuestion(1);
		--  stackOverflow.unvoteQuestion(2);
		
			-- requirements #2
			stackOverflow.downvoteQuestion(1);
			
			-- test #2
			stackOverflow.unvoteQuestion(1);
		
			assertTrue(
				question.score = 0
			);
		);
		
		
		/**
		* Test showQuestionsAndAnswers
		*/
		private testShowQuestionsAndAnswers: () ==> ()
		testShowQuestionsAndAnswers() == (
			
			-- variables
			dcl question: Question;
			dcl answer1: Answer;
			dcl answer2: Answer;
			dcl num: nat;
			
			-- requirements
			stackOverflow.clear();			
			stackOverflow.signup("user1", "pass1");
			stackOverflow.login("user1", "pass1");
			question := stackOverflow.addQuestion("title1","question1");
			answer1 := question.addAnswer(stackOverflow.loggedUser,"text1");
			answer2 := question.addAnswer(stackOverflow.loggedUser,"text2");
			stackOverflow.upvoteQuestion(1);
			stackOverflow.upvoteAnswer(1);
			stackOverflow.downvoteAnswer(2);
			
			-- test
			num := stackOverflow.showQuestionsAndAnswers();
			
			assertTrue(
				num = 3
			);
		);
		
		
		
		/**
		* Run all tests
		*/
		public static main: () ==> ()
		main() ==
		(
			dcl soTest: StackOverflowTest := new StackOverflowTest();
			
			IO`print("\n--- TESTING ---\n");
			
			IO`print("testSignup: ");
			soTest.testSignup();
			IO`print("Success!");
			
			IO`print("\ntestLogin: ");
			soTest.testLogin();
			IO`print("Success!");
			
			IO`print("\ntestLogout: ");
			soTest.testLogout();
			IO`print("Success!");
			
			IO`print("\ntestAddQuestion: ");
			soTest.testAddQuestion();
			IO`print("Success!");
			
			IO`print("\ntestAddAnswer: ");
			soTest.testAddAnswer();
			IO`print("Success!");
			
			IO`print("\ntestUpvoteAnswer: ");
			soTest.testUpvoteAnswer();
			IO`print("Success!");
			
			IO`print("\ntestDownvoteAnswer: ");
			soTest.testDownvoteAnswer();
			IO`print("Success!");		
				
			IO`print("\ntestUnvoteAnswer: ");
			soTest.testUnvoteAnswer();
			IO`print("Success!");
			
			IO`print("\ntestUpvoteQuestion: ");
			soTest.testUpvoteQuestion();
			IO`print("Success!");
			
			IO`print("\ntestDownvoteQuestion: ");
			soTest.testDownvoteQuestion();
			IO`print("Success!");
			
			IO`print("\ntestUnvoteQuestion: ");
			soTest.testUnvoteQuestion();
			IO`print("Success!");
			
			IO`print("\ntestShowQuestionsAndAnswers: ");
			soTest.testShowQuestionsAndAnswers();
			IO`print("Success!");
		
			IO`print("\n--- TESTING ---\n");
		);
		
end StackOverflowTest