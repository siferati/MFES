/**
* This class represents a question
*/
class Question
	
	types
		
		/** String */
		public String = seq of char;
		
		/** Identifier (starts at 1) */
		public ID = nat1;
		
		
	instance variables
		
		/** Id of the next question */
		public static nextid: ID := 1;
		
		/** Id of this question */
		public id: ID;
		
		/** Title of this question */
		public title: String;
		
		/** Body of this question */
		public text: String;
		
		/** List of answers */
		public answers: seq of Answer := [];
		
		/** Score of this question */
		public score: int := 0;
		
		/** Set of users that have upvoted this question */
		public upvoters: set of User := {};
		
		/** Set of users that have downvoted this question */
		public downvoters: set of User := {};
		
		/** Author of this question */
		public author: [User];

		-- author cant be null
		inv author <> nil;
		
		-- score is the sum of upvotes and downvotes
		inv score = card upvoters - card downvoters;
		
		
	operations
		
		/**
		* Default Constructor
		*
		* @post Question was created
		*/
		public Question: () ==> Question
		Question() == (
		
			author := new User();
			title := " ";
			text := " ";
			id := nextid;
			nextid := nextid + 1;
			
			return self;
		)
		post (
			title = " " and text = " " and nextid = id + 1
		);
		
		
	 	/**
		* Constructor
		*
		* @param user Author
		* @param title1 Title
		* @param text1 Body
		*
		* @post Question was created
		*/
		public Question: User * String * String ==> Question
		Question(user, title1, text1) == (
		
			author := user;
			title := title1;
			text := text1;
			id := nextid;
			nextid := nextid + 1;
			
			return self
		)
		post (
			title = title1 and text = text1 and nextid = id + 1
		);
		
		
		/**
		* Adds an answer to this question
		*
		* @param user Author
		* @param text1 Body
		*
		* @post Answer was added
		*/
		public addAnswer: User * String ==> Answer
		addAnswer(user, text1) == (
			
			-- create answer
			dcl answer: Answer := new Answer(user, text1);
			
			-- add answer
			answers := answers^[answer];
			
			return answer;
		)
		post (
			len answers = len answers~ + 1 and
			exists answer in set elems answers & (
				answer.author = user and
				answer.text = text1
			)
		);
		
		
		/**
		* Adds an upvote to this question
		*
		* @param user User that upvoted this
		*
		* @pre  User hasn't upvoted this
		*
		* @post User upvoted this
		* @post User hasn't downvoted this
		* @post Score updated
		*/
		public upvote: User ==> ()
		upvote(user) == (
			
			atomic (
			
				-- add user to set of voters
				upvoters := upvoters union {user};
				
				-- update score
				score := score + 1;
			);
			
			if (user in set downvoters) then (
			
				atomic (
				
					-- remove user from set of downvoters
					downvoters := downvoters \ {user};
					
					-- update score
					score := score + 1;
				);
			);			
		)
		pre  (
			user not in set upvoters
		)
		post (
			upvoters = upvoters~ union {user} and
			downvoters = downvoters~ \ {user} and
			score = card upvoters - card downvoters
		);
		
		
		/**
		* Adds a downvote to this question
		*
		* @param user User that downvoted this
		*
		* @pre  User hasn't downvoted this
		*
		* @post User downvoted this
		* @post User hasn't upvoted this
		* @post Score updated
		*/
		public downvote: User ==> ()
		downvote(user) == (
			
			atomic (
				
				-- add user to set of downvoters
				downvoters := downvoters union {user};
				
				-- update score
				score := score - 1;
			);
			
			if (user in set upvoters) then (
			
				atomic (
				
					-- remove user from set of upvoters
					upvoters := upvoters \ {user};
				
					-- update score
					score := score - 1;
				)
			);			
		)
		pre  (
			user not in set downvoters
		)
		post (
			downvoters = downvoters~ union {user} and
			upvoters = upvoters~ \ {user} and
			score = card upvoters - card downvoters
		);
		
		
		/**
		* Removes previously casted vote from this question
		*
		* @param user User that unvoted this
		*
		* @pre  User has voted on this
		*
		* @post User hasn't upvoted this
		* @post User hasn't downvoted this
		* @post Score updated
		*/
		public unvote: User ==> ()
		unvote(user) == (
			
			if (user in set upvoters) then (
			
				atomic (
				
					-- remove user from set of upvoters
					upvoters := upvoters \ {user};
				
					-- update score
					score := score - 1;
				)
			);
			
			if (user in set downvoters) then (
			
				atomic (
				
					-- remove user from set of downvoters
					downvoters := downvoters \ {user};
				
					-- update score
					score := score + 1;
				)
			);		
		)
		pre  (
			user in set upvoters or user in set downvoters
		)
		post (
			upvoters = upvoters~ \ {user} and
			downvoters = downvoters~ \ {user} and
			score = card upvoters - card downvoters
		);

end Question