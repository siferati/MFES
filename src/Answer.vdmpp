/**
* This class represents an answer
*/
class Answer

	types
		
		/** String */
		public String = seq of char;
		
		/** Identifier (starts at 1) */
		public ID = nat1;
		

	instance variables
	
		/** Id of the next answer */
		public static nextid: ID := 1;
		
		/** Id of this answer */
		public id: ID;
		
		/** Body of this answer */
		public text: String;
		
		/** Score of this answer */
		public score: int := 0;
		
		/** Set of users that have upvoted this answer */
		public upvoters: set of User := {};
		
		/** Set of users that have downvoted this answer */
		public downvoters: set of User := {};
		
		/** Author of this answer */
		public author: [User];
		
		-- author cant be null
		inv author <> nil;
		
		-- score is the sum of upvotes and downvotes
		inv score = card upvoters - card downvoters;
		
		
	operations
		
		/**
		* Default Constructor
		*
		* @post Answer was created
		*/
		public Answer: () ==> Answer
		Answer() == (
		
			author := new User();
			text := " ";
			id := nextid;
			nextid := nextid + 1;
			
			return self;
		)
		post (
			text = " " and nextid = id + 1
		);
		
		
		/**
		* Constructor
		*
		* @param user Author
		* @param text1 Body
		*
		* @post Answer was created
		*/
		public Answer: User * String ==> Answer
		Answer(user, text1) == (
		
			author := user;
			text := text1;
			id := nextid;
			nextid := nextid + 1;
			
			return self;
		)
		post (
			text = text1 and nextid = id + 1
		);
		
		
		/**
		* Adds an upvote to this answer
		*
		* @param user User that upvoted this
		*
		* @pre User hasn't upvoted this
		*
		* @post User upvoted this
		* @post User hasn't downvoted this
		* @post Score updated
		*/
		public upvote: User ==> ()
		upvote(user) == (
			
			atomic (
			
				-- add user to set of upvoters
				upvoters := upvoters union {user};
				
				-- update score
				score := score + 1;
			);
			
			if (user in set downvoters) then (
			
				atomic (
				
					-- remove user from set of downvoters
					downvoters := downvoters \ {user};
					
					-- update score
					score := score + 1;
				);
			);			
		)
		pre  (
			user not in set upvoters
		)
		post (
			upvoters = upvoters~ union {user} and
			downvoters = downvoters~ \ {user} and
			score = card upvoters - card downvoters
		);
		
		
		/**
		* Adds a downvote to this answer
		*
		* @param user User that downvoted this
		*
		* @pre User hasn't downvoted this
		*
		* @post User downvoted this
		* @post User hasn't upvoted this
		* @post Score updated
		*/
		public downvote: User ==> ()
		downvote(user) == (
			
			atomic (
				
				-- add user to set of downvoters
				downvoters := downvoters union {user};
				
				-- update score
				score := score - 1;
			);
			
			if (user in set upvoters) then (
			
				atomic (
				
					-- remove user from set of upvoters
					upvoters := upvoters \ {user};
				
					-- update score
					score := score - 1;
				)
			);			
		)
		pre  (
			user not in set downvoters
		)
		post (
			downvoters = downvoters~ union {user} and
			upvoters = upvoters~ \ {user} and
			score = card upvoters - card downvoters
		);
		
		
		/**
		* Removes previously casted vote from this answer
		*
		* @param user User that unvoted this
		*
		* @pre User has voted on this
		*
		* @post User hasn't upvoted this
		* @post User hasn't downvoted this
		* @post Score updated
		*/
		public unvote: User ==> ()
		unvote(user) == (
			
			if (user in set upvoters) then (
			
				atomic (
				
					-- remove user from set of upvoters
					upvoters := upvoters \ {user};
				
					-- update score
					score := score - 1;
				)
			);
			
			if (user in set downvoters) then (
			
				atomic (
				
					-- remove user from set of downvoters
					downvoters := downvoters \ {user};
				
					-- update score
					score := score + 1;
				)
			);								
		)
		pre  (
			user in set upvoters or user in set downvoters
		)
		post (
			upvoters = upvoters~ \ {user} and
			downvoters = downvoters~ \ {user} and
			score = card upvoters - card downvoters
		);
	
end Answer